{"_id":"AKjIqBTf2gK7ShB8","name":"Antorchas","permission":{"default":0,"NLu8dzFBI3Kvrwky":3},"type":"script","sort":100001,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"// A macro for the Foundry virtual tabletop that lets a user configure their token's vision and lighting settings, based on lighting sources from D&D 5e. Has a dependency on About Time by Tim Posney.\r\n\r\nif (canvas.tokens.controlled.length === 0)\r\n  ui.notifications.error(\"Please select a token\");\r\n\r\nlet namedfields = (...fields) => {\r\n  return (...arr) => {\r\n    var obj = {};\r\n    fields.forEach((field, index) => {\r\n      obj[field] = arr[index];\r\n    });\r\n    return obj;\r\n  };\r\n};\r\n\r\n// Very ugly automated construction below. DRY, but at what cost?\r\nlet VisionType = namedfields('name', 'dim', 'bright');\r\nvar visions = (() => {\r\n  return [\r\n    VisionType('Leave Unchanged', null, null),\r\n    VisionType('Self', 5, 0),\r\n    VisionType('Devil\\'s Sight', 0, 120)\r\n  ].concat(...[...Array(6).keys()].map(x => (x+1)*30).map(n => {\r\n    return VisionType(`Darkvision (${n} feet)`, n, 0);\r\n  }));\r\n})();\r\n\r\nlet LightSource = namedfields('name', 'dim', 'bright', 'angle', 'lockRotation')\r\nvar lightSources = [\r\n  LightSource('Leave Unchanged', null, null, null, null),\r\n  LightSource('None', 0, 0, 360, null),\r\n  LightSource('Candle', 10, 5, 360, null),\r\n  LightSource('Torch / Light Cantrip', 40, 20, 360, null),\r\n  LightSource('Lamp', 45, 15, 360, null),\r\n  LightSource('Hooded Lantern', 60, 30, 360, null),\r\n  LightSource('Hooded Lantern (Dim)', 5, 0, 360, null),\r\n  LightSource('Bullseye Lantern', 120, 60, 52.5, false)\r\n];\r\n\r\nlet applyChanges = false;\r\nnew Dialog({\r\n  title: `Token Vision Configuration`,\r\n  content: `\r\n<form>\r\n  <div class=\"form-group\">\r\n    <label>Vision Type:</label>\r\n    <select id=\"vision-type\" name=\"vision-type\">\r\n      ${\r\n        visions.map((vision, index) => {\r\n          return `\\t<option value=${index}>${vision.name}</option>`;\r\n        }).join('\\n')\r\n      }\r\n    </select>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label>Light Source:</label>\r\n    <select id=\"light-source\" name=\"light-source\">\r\n      ${\r\n        lightSources.map((lightSource, index) => {\r\n          return `\\t<option value=${index}>${lightSource.name}</option>`;\r\n        }).join('\\n')\r\n      }\r\n    </select>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label>Duration in Minutes:</label>\r\n    <input type=\"number\" id=\"duration\" name=\"duration\" min=\"0\">\r\n  </div>\r\n</form>\r\n`,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply Changes`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel Changes`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        let visionIndex = parseInt(html.find('[name=\"vision-type\"]')[0].value) || 0;\r\n        let lightIndex = parseInt(html.find('[name=\"light-source\"]')[0].value) || 0;\r\n        let duration = parseInt(html.find('[name=\"duration\"]')[0].value) || 0;\r\n\r\n        if (duration > 0) {\r\n          if (game.modules.get(\"about-time\").active != true) {\r\n            ui.notifications.error(\"About Time isn't loaded\");\r\n          } else {\r\n            ((backup) => {\r\n              game.Gametime.doIn({minutes:Math.floor(3 * duration / 4)}, () => {\r\n                ChatMessage.create({\r\n                  user: game.user._id,\r\n                  content: \"The fire burns low...\",\r\n                  speaker: speaker\r\n                }, {});\r\n              });\r\n            })(Object.assign({}, token.data));\r\n            ((backup) => {\r\n              game.Gametime.doIn({minutes:duration}, () => {\r\n                ChatMessage.create({\r\n                  user: game.user._id,\r\n                  content: \"The fire goes out, leaving you in darkness.\",\r\n                  speaker: speaker\r\n                }, {});\r\n                token.update({\r\n                  vision: true,\r\n                  dimSight: backup.dimSight,\r\n                  brightSight: backup.brightSight,\r\n                  dimLight: backup.dimLight,\r\n                  brightLight:  backup.brightLight,\r\n                  lightAngle: backup.lightAngle,\r\n                  lockRotation: backup.lockRotation\r\n                });\r\n              });\r\n            })(Object.assign({}, token.data));\r\n          }\r\n        }\r\n\r\n        // Configure new token vision\r\n        let dimSight = visions[visionIndex].dim ?? token.data.dimSight;\r\n        let brightSight = visions[visionIndex].bright ?? token.data.brightSight;\r\n        let dimLight = lightSources[lightIndex].dim ?? token.data.dimLight;\r\n        let brightLight = lightSources[lightIndex].bright ?? token.data.brightLight;\r\n        let lightAngle = lightSources[lightIndex].angle ?? token.data.lightAngle;\r\n        let lockRotation = lightSources[lightIndex].lockRotation ?? token.data.lockRotation;\r\n\r\n        // Update Token\r\n        console.log(token);\r\n        token.update({\r\n          vision: true,\r\n          dimSight: dimSight,\r\n          brightSight: brightSight,\r\n          dimLight: dimLight,\r\n          brightLight:  brightLight,\r\n          lightAngle: lightAngle,\r\n          lockRotation: lockRotation\r\n        });\r\n      }\r\n    }\r\n  }\r\n}).render(true);","author":"NLu8dzFBI3Kvrwky","img":"modules/game-icons-net/blackbackground/torch.svg","actorIds":[]}
{"_id":"Vd7KCgrlAKKGlUNQ","name":"Localización de daño","type":"script","author":"NLu8dzFBI3Kvrwky","img":"modules/game-icons-net/blackbackground/pierced-body.svg","scope":"global","command":"let table = game.tables.getName(\"Localización\")\n\nlet roll = await table.roll();\n\nlet content = `<p><strong>Te han dado en...</strong></p> ${roll.results[0].data.text}<br>`\n\nChatMessage.create({content: content})","folder":null,"sort":-100000,"permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"NLu8dzFBI3Kvrwky":3},"flags":{"exportSource":{"world":"aquelarre","system":"sandbox","coreVersion":"0.8.6","systemVersion":"0.9.4"}}}
{"_id":"graeqsLDcvNPV9mq","name":"Pifias básicas","type":"script","author":"NLu8dzFBI3Kvrwky","img":"modules/game-icons-net/whitetransparent/drop-weapon.svg","scope":"global","command":"let table1 = game.tables.getName(\"Pifias básicas\");\n\nlet roll1 = await table1.roll();\n\nlet content = `<p><strong>Pifia con armas cuerpo a cuerpo</strong></p> ${roll1.results[0].data.text}<br>`\n\nChatMessage.create({content: content})","folder":null,"sort":-25000,"permission":{"default":0,"NLu8dzFBI3Kvrwky":3},"flags":{"advanced-macros":{"runAsGM":false},"exportSource":{"world":"aquelarre","system":"sandbox","coreVersion":"0.8.6","systemVersion":"0.9.4"}}}
