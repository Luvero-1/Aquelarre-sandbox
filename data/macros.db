{"_id":"2qbpjCpadycBST7P","name":"Misiones","type":"script","author":"NLu8dzFBI3Kvrwky","img":"icons/tools/navigation/map-plain-green.webp","scope":"global","command":"QuestLog.render(true);","folder":null,"sort":100001,"permission":{"default":0,"NLu8dzFBI3Kvrwky":3},"flags":{"furnace":{"runAsGM":false}}}
{"_id":"4ysVymDtET4pv89q","name":"Mapas","type":"script","author":"NLu8dzFBI3Kvrwky","img":"icons/tools/navigation/map-marked-green.webp","scope":"global","command":"window.Ardittristan.InlineViewer.sendUrl('https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d121695.1400705477!2d2.062099078662296!3d41.77834559579388!2m3!1f8.625000000000002!2f0!3f0!3m2!1i1024!2i768!4f35!5e1!3m2!1ses!2ses!4v1621335918396!5m2!1ses!2ses', false, 800, 600, 'interactivemap', '', [])","folder":null,"sort":100001,"permission":{"default":0,"NLu8dzFBI3Kvrwky":3},"flags":{"furnace":{"runAsGM":false}}}
{"_id":"7k5JGRTUIUlKF2AG","name":"Pifias a Distancia","type":"script","author":"NLu8dzFBI3Kvrwky","img":"modules/game-icons-net/whitetransparent/arrowed.svg","scope":"global","command":"let table1 = game.tables.getName(\"Pifias Distancia\")\n\nlet roll1 = await table1.roll();\n\nlet content = `<p><strong>Pifia con armas a distancia</strong></p> ${roll1.results[0].data.text}<br>`\n\nChatMessage.create({content: content})","folder":null,"sort":0,"permission":{"default":0,"NLu8dzFBI3Kvrwky":3},"flags":{"advanced-macros":{"runAsGM":false},"exportSource":{"world":"aquelarre","system":"sandbox","coreVersion":"0.8.6","systemVersion":"0.9.4"}}}
{"_id":"8gYVRirDlUKzZv8F","name":"Pifias Pelea&Esquiva","type":"script","author":"NLu8dzFBI3Kvrwky","img":"modules/game-icons-net/whitetransparent/arm-sling.svg","scope":"global","command":"let table1 = game.tables.getName(\"Pifias Pelea&Esquiva\")\n\nlet roll1 = await table1.roll();\n\nlet content = `<p><strong>Pifia peleando o esquivando</strong></p> ${roll1.results[0].data.text}<br>`\n\nChatMessage.create({content: content})","folder":null,"sort":-50000,"permission":{"default":0,"NLu8dzFBI3Kvrwky":3},"flags":{"advanced-macros":{"runAsGM":false},"exportSource":{"world":"aquelarre","system":"sandbox","coreVersion":"0.8.6","systemVersion":"0.9.4"}}}
{"_id":"AKjIqBTf2gK7ShB8","name":"Antorchas","permission":{"default":0,"NLu8dzFBI3Kvrwky":3},"type":"script","sort":100001,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"// A macro for the Foundry virtual tabletop that lets a user configure their token's vision and lighting settings, based on lighting sources from D&D 5e. Has a dependency on About Time by Tim Posney.\r\n\r\nif (canvas.tokens.controlled.length === 0)\r\n  ui.notifications.error(\"Please select a token\");\r\n\r\nlet namedfields = (...fields) => {\r\n  return (...arr) => {\r\n    var obj = {};\r\n    fields.forEach((field, index) => {\r\n      obj[field] = arr[index];\r\n    });\r\n    return obj;\r\n  };\r\n};\r\n\r\n// Very ugly automated construction below. DRY, but at what cost?\r\nlet VisionType = namedfields('name', 'dim', 'bright');\r\nvar visions = (() => {\r\n  return [\r\n    VisionType('Leave Unchanged', null, null),\r\n    VisionType('Self', 5, 0),\r\n    VisionType('Devil\\'s Sight', 0, 120)\r\n  ].concat(...[...Array(6).keys()].map(x => (x+1)*30).map(n => {\r\n    return VisionType(`Darkvision (${n} feet)`, n, 0);\r\n  }));\r\n})();\r\n\r\nlet LightSource = namedfields('name', 'dim', 'bright', 'angle', 'lockRotation')\r\nvar lightSources = [\r\n  LightSource('Leave Unchanged', null, null, null, null),\r\n  LightSource('None', 0, 0, 360, null),\r\n  LightSource('Candle', 10, 5, 360, null),\r\n  LightSource('Torch / Light Cantrip', 40, 20, 360, null),\r\n  LightSource('Lamp', 45, 15, 360, null),\r\n  LightSource('Hooded Lantern', 60, 30, 360, null),\r\n  LightSource('Hooded Lantern (Dim)', 5, 0, 360, null),\r\n  LightSource('Bullseye Lantern', 120, 60, 52.5, false)\r\n];\r\n\r\nlet applyChanges = false;\r\nnew Dialog({\r\n  title: `Token Vision Configuration`,\r\n  content: `\r\n<form>\r\n  <div class=\"form-group\">\r\n    <label>Vision Type:</label>\r\n    <select id=\"vision-type\" name=\"vision-type\">\r\n      ${\r\n        visions.map((vision, index) => {\r\n          return `\\t<option value=${index}>${vision.name}</option>`;\r\n        }).join('\\n')\r\n      }\r\n    </select>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label>Light Source:</label>\r\n    <select id=\"light-source\" name=\"light-source\">\r\n      ${\r\n        lightSources.map((lightSource, index) => {\r\n          return `\\t<option value=${index}>${lightSource.name}</option>`;\r\n        }).join('\\n')\r\n      }\r\n    </select>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label>Duration in Minutes:</label>\r\n    <input type=\"number\" id=\"duration\" name=\"duration\" min=\"0\">\r\n  </div>\r\n</form>\r\n`,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply Changes`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel Changes`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        let visionIndex = parseInt(html.find('[name=\"vision-type\"]')[0].value) || 0;\r\n        let lightIndex = parseInt(html.find('[name=\"light-source\"]')[0].value) || 0;\r\n        let duration = parseInt(html.find('[name=\"duration\"]')[0].value) || 0;\r\n\r\n        if (duration > 0) {\r\n          if (game.modules.get(\"about-time\").active != true) {\r\n            ui.notifications.error(\"About Time isn't loaded\");\r\n          } else {\r\n            ((backup) => {\r\n              game.Gametime.doIn({minutes:Math.floor(3 * duration / 4)}, () => {\r\n                ChatMessage.create({\r\n                  user: game.user._id,\r\n                  content: \"The fire burns low...\",\r\n                  speaker: speaker\r\n                }, {});\r\n              });\r\n            })(Object.assign({}, token.data));\r\n            ((backup) => {\r\n              game.Gametime.doIn({minutes:duration}, () => {\r\n                ChatMessage.create({\r\n                  user: game.user._id,\r\n                  content: \"The fire goes out, leaving you in darkness.\",\r\n                  speaker: speaker\r\n                }, {});\r\n                token.update({\r\n                  vision: true,\r\n                  dimSight: backup.dimSight,\r\n                  brightSight: backup.brightSight,\r\n                  dimLight: backup.dimLight,\r\n                  brightLight:  backup.brightLight,\r\n                  lightAngle: backup.lightAngle,\r\n                  lockRotation: backup.lockRotation\r\n                });\r\n              });\r\n            })(Object.assign({}, token.data));\r\n          }\r\n        }\r\n\r\n        // Configure new token vision\r\n        let dimSight = visions[visionIndex].dim ?? token.data.dimSight;\r\n        let brightSight = visions[visionIndex].bright ?? token.data.brightSight;\r\n        let dimLight = lightSources[lightIndex].dim ?? token.data.dimLight;\r\n        let brightLight = lightSources[lightIndex].bright ?? token.data.brightLight;\r\n        let lightAngle = lightSources[lightIndex].angle ?? token.data.lightAngle;\r\n        let lockRotation = lightSources[lightIndex].lockRotation ?? token.data.lockRotation;\r\n\r\n        // Update Token\r\n        console.log(token);\r\n        token.update({\r\n          vision: true,\r\n          dimSight: dimSight,\r\n          brightSight: brightSight,\r\n          dimLight: dimLight,\r\n          brightLight:  brightLight,\r\n          lightAngle: lightAngle,\r\n          lockRotation: lockRotation\r\n        });\r\n      }\r\n    }\r\n  }\r\n}).render(true);","author":"NLu8dzFBI3Kvrwky","img":"modules/game-icons-net/blackbackground/torch.svg","actorIds":[]}
{"_id":"AzKx2a2nv2DRNxfN","name":"Visor de Pjs","type":"script","author":"NLu8dzFBI3Kvrwky","img":"icons/svg/dice-target.svg","scope":"global","command":"//                                                                  \n// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \n//                                                                  \n//                     Settings for this macro                      \n//                                                                  \n// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \n// \nfunction Setting_Foldername() {\n  let foldername;\n  foldername='Personajes de campaña';  // set folder to empty string to use selected(controlled) tokens instead  \n  //foldername='Goblins'; \n  return foldername; \n }     \nfunction Setting_PropertiesTitle(){\n  return 'PJs Campaña';  // use this if you have several instances of this macro running, this will add this text to the title of the displayed form, makes it easier to tell them apart\n  }\n                                                                                                                                        \nfunction Setting_PropertiesRequested() {\nlet objPropertiesToDisplay = [\n{\"display\":\"pv\",\"columnheader\":\"PV\"},\n{\"display\":\"temp\",\"roll\":\"temp\",\"columnheader\":\"Templanza\"},\n{\"display\":\"irracio\",\"roll\":\"irracio\",\"columnheader\":\"Irracionalidad\"},\n{\"display\":\"racio\",\"roll\":\"racio\",\"columnheader\":\"Racionalidad\"},\n{\"display\":\"suer_roll\",\"roll\":\"suer_roll\",\"columnheader\":\"Suerte\"},\n{\"display\":\"esqu\",\"roll\":\"esqu\",\"columnheader\":\"Esquivar\"},\n{\"display\":\"c_pelea\",\"roll\":\"c_pelea\",\"columnheader\":\"Pelea\"},\n{\"display\":\"c_arc\",\"roll\":\"c_arc\",\"columnheader\":\"Arcos\"},\n{\"display\":\"c_balles\",\"roll\":\"c_balles\",\"columnheader\":\"Ballestas\"},\n{\"display\":\"c_cuch\",\"roll\":\"c_cuch\",\"columnheader\":\"Cuchillos\"},\n{\"display\":\"c_maz\",\"roll\":\"c_maz\",\"columnheader\":\"Mazas\"},\n{\"display\":\"c_palo\",\"roll\":\"c_palo\",\"columnheader\":\"Palos\"},\n];\n  return JSON.stringify(objPropertiesToDisplay); \n  \n// Format for each properties\n//  {\"display\":\"<Property to use as display label>\",\"roll\":\"<Property to use the rollexpression from>\",\"columnheader\":\"<Any text string>\",\"columnheadertooltip\":\"<Any text string>\"}\n//\n// Field \"display\"\n//  - required but can be an empty string(will display the d20 glyph) \n// Field \"roll\"\n//  - optional but needs a non-empty string to generate a clickable link that executes a roll\n// Field \"columnheader\"\n//  - optional. If not specified, the display or roll property will be used\n// Field \"columnheadertooltip\" \n//  - is optional but useful when using icons in the header\n//  - if not specified, the macro will use the tooltip of the display or roll property \n// \n// to use a cItem in  display or roll field, use \"<cItem name>|<cItem property>\"\n// To use a FontAwesome glyph(https://fontawesome.com/icons?d=gallery&p=2&m=free) in columnheader or display, use \"%fas fa-<icon name>\".\n// to call a macro from roll field use \"?<macroname>\"- The macro will execute with two arguments, actor/tokenid and if it is a token on a scene\n// If you have the module The Furnace installed you can use the arguments in your function like this\n\n//Example script macro(named \"Hello\") to call\n//function ShowImg(actorId,useCanvastokens){\n//let actor;\n//let token; \n//let simg;\n//let sname;\n//if(useCanvastokens==0){\n//  actor = game.actors.get(actorId);\n//  if(actor!=null){\n//    simg=actor.data.img;\n//    sname=actor.name;         \n//  }\n//}\n//else{                \n//  token = canvas.tokens.get(actorId);\n//  if(token!=null){\n//    simg=token.data.img;\n//    sname=token.data.name;\n//  }           \n//}\n//ChatMessage.create({\n//    content : '<p>' +sname +'</p> <img src=\"' + simg + '\" />'\n//  });\n//}\n//ShowImg(args[0],args[1]);\n\n// Example for properties\n//let objPropertiesToDisplay = [\n//{\"display\":\"Body\"},\n//{\"display\":\"Body\",\"roll\":\"Body\"},\n//{\"display\":\"Body\",\"roll\":\"Body\",\"columnheader\":\"BOD\"},\n//{\"display\":\"Body\",\"roll\":\"Body\",\"columnheader\":\"BOD\",\"columnheadertooltip\":\"Body property\"},\n//{\"display\":\"Body\",\"roll\":\"Body\",\"columnheader\":\"%fas fa-child\",\"columnheadertooltip\":\"Body property\"},\n//{\"display\":\"Body\",\"roll\":\"Body\",\"columnheader\":\"%fas fa-child\"},\n//{\"display\":\"\",\"roll\":\"Body\"}, \n//{\"display\":\"%fas fa-child\",\"roll\":\"Body\"},  \n//{\"display\":\"Body\",\"roll\":\"HealthCheck\",\"columnheader\":\"Health check\"}, \n//{\"display\":\"Mind\",\"roll\":\"Mind\",\"columnheader\":\"%fas fa-graduation-cap\",\"columnheadertooltip\":\"Mind property\"},\n//{\"display\":\"Stamina\",\"roll\":\"\",\"columnheader\":\"%fas fa-heart\",\"columnheadertooltip\":\"Stamina property\"},\n//{\"display\":\"HairColor\",\"roll\":\"\",\"columnheader\":\"Hair Color\"},\n//{\"display\":\"HairColor\",\"roll\":\"\",\"columnheader\":\"%fas fa-user-ninja\"},\n//{\"display\":\"Gender\",\"roll\":\"\",\"columnheader\":\"Gender\"},\n//{\"display\":\"HasMagic\",\"roll\":\"\",\"columnheader\":\"Has Magic\"},\n//{\"display\":\"%fas fa-code\",\"roll\":\"?Hello\",\"columnheader\":\"Macro\",\"columnheadertooltip\":\"Execute macro\"},\n//{\"display\":\"Rating\",\"roll\":\"\",\"columnheader\":\"Rating\"},\n//{\"display\":\"FatePoints\",\"roll\":\"\",\"columnheader\":\"Fate Pts\"},\n//{\"display\":\"Armed Combat|SkillRank\",\"roll\":\"Armed Combat|SkillRoll\",\"columnheader\":\"Armed Combat Rank(cItem)\"},\n//{\"display\":\"Armed Combat|SkillRoll\",\"roll\":\"Armed Combat|SkillRoll\",\"columnheader\":\"Armed Combat Roll(cItem)\"},\n//{\"display\":\"Ranged Combat|SkillRank\",\"roll\":\"Ranged Combat|SkillRoll\",\"columnheader\":\"Ranged Combat(cItem)\"}\n//];\n \n}  \n \nfunction Setting_DialogBackground(){\n  // return 0 - default\n  // return 1 - use folder color(if folder view)\n  // return 2 - use folder color(if folder view) with custom background(set in Setting_CustomDialogBackground)\n  // return 3 - use custom background(set in Setting_CustomDialogBackground)\n  let returnvalue = 3;\n  return returnvalue;\n}     \n \nfunction Setting_CustomDialogBackground(){ \n // note about URL, needs escaping of double quotes with 3 backslashes(\\\\\\) example \"url(\\\\\\\"../ui/anvil-bg-bw.png\\\\\\\")\" \n // to get a solid backcolor, set backgound-image to \"none\"\n let objCustomDialogBackground=\n {\"background-color\":\"orange\",\n \"background-image\":\"url(\\\\\\\"../ui/anvil-bg-bw.png\\\\\\\")\",      \n \"background-repeat\":\"no-repeat\",\n \"background-attachment\":\"local\",\n \"background-position\":\"bottom right\",\n \"background-size\":\"200px\",\n \"background-origin\":\"\",\n \"background-clip\":\"\"}\n ;\n return JSON.stringify(objCustomDialogBackground);\n}\n\nfunction Setting_TableCSS(){  \n  return \"color:black;\";\n}\n\nfunction Setting_HoverColor(){  \n  return \"darkred\";  // any css color\n}\n\n\n\nfunction Setting_FormWidth(){return 0;} // set to 0 to autosize \n//                                                                  \n// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \n//                                                                  \n//                        Macro generic code                        \n//                                                                  \n// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \n//         \n// **************************************************************** \n// Macro:         Quick Character Overview                         \n// ================================================================ \n// Date       Version  Author               Description             \n// ---------- -------- -------------------- -----------------------\n// 2021-03-22 1.0.0    Ramses800            Macro created. \n// 2021-03-23 1.1.0    Ramses800            Updates.\n// 2021-03-23 1.2.0    Ramses800            Updates.\n// 2021-03-23 1.3.0    Ramses800            Updates.\n// 2021-04-01 2.0.0    Ramses800            Complete rewrite. \n// 2021-04-02 2.0.1    Ramses800            Added simpletext,list,checkbox,radio & macros   \n// 2021-04-02 2.0.2    Ramses800            Fixes\n// 2021-04-08 2.0.3    Ramses800            Fixes\n// 2021-04-10 2.0.4    Ramses800            simplification of conf   \n// 2021-04-16 2.0.5    Ramses800            background colors\n// 2021-08-30 2.0.6    Ramses800            table css      \n// ****************************************************************                                                                                                                                         \nfunction macroTitle() {\n  let thismacroname=`Visor de PJs`;\n  if (Setting_PropertiesTitle()!=''){\n    thismacroname=thismacroname + `(`+ Setting_PropertiesTitle() +`)` ;\n  }\n  if(Setting_Foldername()==''){ \n    return thismacroname + ` - Selected token(s)`;\n  }\n  else{   \n    return thismacroname + ` - ${Setting_Foldername()}`;\n  }\n}\n\n\n// This is used to convert texts into javascript/programmable acceptable definitions\nfunction slugify(text,separator) {\n  return text\n    .toString()\n    .normalize('NFD')                   // split an accented letter in the base letter and the acent\n    .replace(/[\\u0300-\\u036f]/g, '')   // remove all previously split accents\n    .toLowerCase()\n    .trim()\n    .replace(/[^a-z0-9 ]/g, '')   // remove all chars not letters, numbers and spaces (to be replaced)\n    .replace(/\\s+/g, separator);\n}\n// This is used to make sure that function styles id etc are unique in the total namespace\n// if not unique, then macros/other functinalities could be intermixed and produce unpredictable results\nfunction thisMacroName(){return `${slugify(macroTitle(),'_')}`;  } \n\n// --------------\n// dialog content\n// -------------- \nlet html_content = ` \n  <!--macro custom styles-->\n  <style>  \n    .${thisMacroName()}_hbo:hover {cursor: pointer;color: ${Setting_HoverColor()};    font-weight: bold;}    \n    .${thisMacroName()}_hbox:hover {box-shadow:0 0 0 2px ${Setting_HoverColor()};cursor: pointer;}  \n    \n    table.${thisMacroName()}_table{\n       ${Setting_TableCSS()}\n    }  \n    \n    th.${thisMacroName()}_refresh_th{text-align:left;padding:0px 0px 0px 6px;width:48px;min-width:48px;max-width:48px;min-height:24px;height: 24px;} \n    th.${thisMacroName()}_property_th{padding:0px 3px 0px 3px;}  \n    td.${thisMacroName()}_actorname_td{padding-left:4px;}\n    img.${thisMacroName()}_portrait_img{height:48px;width:48px;min-width:48px;object-fit:cover;object-position:50% 0;margin: 0 8px 0 2px;border: none;}  \n    td.${thisMacroName()}_portrait_td{text-align:left;width:48px;min-width:48px;max-width:48px;display: block;padding:2px 0px 0px 2px;vertical-align:middle;}\n  </style> \n  \n  <!--macro dialog content-->  \n  \n  <table id=\"${thisMacroName()}_CharactersProperties\" class=\"${thisMacroName()}_table\">\n    <thead>\n    <tr id=\"${thisMacroName()}_CharactersPropertiesHeaderRow\"><th class=\"${thisMacroName()}_refresh_th\"><i id=\"${thisMacroName()}_btnRefresh\" title=\"Refresh\" class=\"fas fa-redo-alt ${thisMacroName()}_hbo\" onclick=\"${thisMacroName()}_Main()\"></i></th><th></th></tr>\n    </thead>\n    <tbody id=\"${thisMacroName()}_CharactersPropertiesBody\" >\n    </tbody>\n  </table>     \n    \n  <!--macro dialog scripts-->     \n  <script>\n    if (typeof ${thisMacroName()}_foldercolor === 'undefined'){  \n      let ${thisMacroName()}_foldercolor;\n    }\n   // support functions\n    function ${thisMacroName()}_singleQuote()  {return '&quot;';} \n    function ${thisMacroName()}_singleQuoted(text)  {return '&quot;' + text + '&quot;';}  \n    \n      \n    function ${thisMacroName()}_splitString(sInput,sSeparator,iFieldNr){\n      let arr=sInput.split(sSeparator);\n      if(arr.length>0 && arr.length>iFieldNr )      {\n        return arr[iFieldNr];\n      }\n      else{\n        return sInput;\n      }\n    }\n    \n    function ${thisMacroName()}_executeMacro(actorId,macroname,useCanvastokens=0 ){  \n       \n      let macro = game.macros.getName(macroname);  \n      if (macro!=null){   \n        macro.execute(actorId,useCanvastokens);\n      }\n      else{\n        ui.notifications.warn('Macro ' + macroname +' not found');\n      }\n    }\n    \n    function ${thisMacroName()}_rollActorProperty(actorId,sPropertyId,useCanvastokens=0 ){\n      let actor;\n      let token;  \n      if(useCanvastokens==0){\n        actor = game.actors.get(actorId);         \n      }\n      else{                \n        token = canvas.tokens.get(actorId);\n        if(token!=null){\n            actor=token.actor;\n          }           \n      }                        \n      if(actor!=null){             \n        let actorattributes = actor.data.data.attributes;\n        let rollexp;\n        let rollname;\n        let rollid = [];\n        let property = game.items.get(sPropertyId );\n        rollexp = property.data.data.rollexp;\n        rollname = property.data.data.rollname;\n        rollid.push(property.data.data.rollid);   \n        \n        actor.rollSheetDice(rollexp,rollname,rollid,actorattributes,null); \n       }\n    }      \n      \n    function ${thisMacroName()}_rollActorcItemProperty(actorId,citemname,sPropertyId,useCanvastokens=0){ \n      let actor;  \n      let token; \n      if(useCanvastokens==0){\n        actor = game.actors.get(actorId);\n      }\n      else{\n        // try to get it from scene\n        token = canvas.tokens.get(actorId); \n        if(token!=null){\n          actor=token.actor;\n        }    \n      }\n      //console.log(actor);\n      if(actor!=null){          \n        let citem = actor.data.data.citems.find(y=>y.name == citemname);\n        let property = game.items.get(sPropertyId);  \n        let citemattributes = citem.attributes;\n        rollexp = property.data.data.rollexp;\n        rollname = property.data.data.rollname;         \n        actor.rollSheetDice(rollexp,rollname,null,actor.data.data.attributes,citemattributes); \n      }\n    }\n    function ${thisMacroName()}_showSheet(actorId,useCanvastokens=0){\n      let actor;\n      let token;           \n      if(useCanvastokens==0){\n        actor = game.actors.get(actorId);   \n      } \n      else{  \n        token = canvas.tokens.get(actorId); \n        if(token!=null){   \n          actor=token.actor;\n        }    \n      }    \n      if(actor!=null){\n        actor.sheet.render(true);\n      }\n    }\n    \n    function ${thisMacroName()}_showTokenConfiguration(actorId,useCanvastokens=0){\n      let actor;\n      let token;   \n           \n      if(useCanvastokens==0){\n        actor = game.actors.get(actorId);\n        if(actor!=null){\n          token=actor.data.token; \n          // this token wont work\n        }    \n      } \n      else{  \n        token = canvas.tokens.get(actorId); \n        if(token!=null){   \n          actor=token.actor;\n        }    \n      }\n      if(token!=null){\n        token.sheet.render(true);\n      }\n    }        \n    \n    function ${thisMacroName()}_AddPropertiesHeaders(){\n      let headerrow=document.getElementById(\"${thisMacroName()}_CharactersPropertiesHeaderRow\");\n      let arrProperties = JSON.parse('${Setting_PropertiesRequested()}');\n      let columnheader='';\n      let title=''; \n      let headerproperty;\n      let iscitem=false; \n      let citemname; \n      let propkey;  \n      let tooltip='';  \n      let headeritem='';\n      arrProperties.forEach(function(item){\n        columnheader =  '<i class=\"fas fa-dice-d20\"></i>'; // default  \n        title='';       \n        tooltip='';\n        headeritem='';\n        if (item.hasOwnProperty('columnheadertooltip')){\n          title='title=\"' + item.columnheadertooltip  + '\"';\n        }    \n        else{                   \n          // try getting the tooltip from display or roll\n          if(item.display!='' && !item.display.startsWith(\"%\")){\n            headeritem=item.display;\n          }\n          else{\n            if (item.hasOwnProperty('roll')){ \n              if(item.roll!=''){\n                headeritem = item.roll;\n              }\n            }\n          }   \n          if (headeritem!=''){\n            // determine attribute or citem\n            if (headeritem.indexOf('|')>-1){          \n              iscitem=true; \n              citemname=${thisMacroName()}_splitString(headeritem,'|',0);\n              propkey=${thisMacroName()}_splitString(headeritem,'|',1);                                \n            }      \n            else{\n              propkey=headeritem;\n            }\n          \n            // try to get it from the propertys tooltip\n            headerproperty = game.items.find(y=>y.type==\"property\" && y.data.data.attKey==propkey);\n            if (headerproperty!=null) { \n                  \n              if (headerproperty.data.data.hasOwnProperty('tooltip')){ \n                tooltip= headerproperty.data.data.tooltip;\n                if (tooltip!=''){\n                  if (iscitem){\n                    title='title=\"' + citemname + ' - ' + tooltip  + '\"';\n                  }\n                  else{\n                    title='title=\"' + tooltip  + '\"';\n                  }   \n                }\n              }             \n            }  \n          }          \n        }\n        \n        if (item.hasOwnProperty('columnheader')){         \n          if(item.columnheader.startsWith(\"%\")){\n            // replace it with fas glyph  //<i class=\"fas fa-dice-d20\"></i>'\n            columnheader =  '<i class=\"' + item.columnheader.substr(1)  + '\"></i>';      \n          }\n          else\n          {       \n             columnheader= item.columnheader;\n          }   \n        } \n        else{\n          // use display    \n          if(item.display==''){\n            // try to use the roll instead\n            if (item.hasOwnProperty('roll')){ \n              if(item.roll!=''){\n                columnheader = item.roll;\n              }\n            }             \n          }\n          else{    \n            if(item.display.startsWith(\"%\")){\n            // replace it with fas glyph  //<i class=\"fas fa-dice-d20\"></i>'\n            columnheader =  '<i class=\"' + item.display.substr(1)  + '\"></i>';      \n            }\n            else\n            {                      \n               columnheader=item.display;\n            }                                              \n          }\n        }\n        headerrow.insertCell(-1).outerHTML = '<th class=\"${thisMacroName()}_property_th\" '+title+' >' + columnheader +  '</th>';\n      });\n    }\n       \n    ${thisMacroName()}_AddPropertiesHeaders();\n    \n    function ${thisMacroName()}_DisplayCellContent(cell,actorId,display,roll,useCanvastokens=0){      \n      let slabel='';\n      let sonclick='';\n      let sclassname='';\n      let stitle='';\n      let iscitem=false; \n      let citemname;   \n      let citempropKey;\n      let property;   \n      let actor;\n      let token;\n      let citem;\n      let hasthis=false; \n            \n      try{ \n        if(useCanvastokens==0){\n          actor = game.actors.get(actorId);    \n        } \n        else{  \n          token = canvas.tokens.get(actorId); \n          if(token!=null){   \n            actor=token.actor;\n          }    \n        }               \n        \n        // determine attribute or citem\n        if (display.indexOf('|')>-1){          \n          iscitem=true; \n          citemname=${thisMacroName()}_splitString(display,'|',0);\n          citempropKey=${thisMacroName()}_splitString(display,'|',1);\n          citem = actor.data.data.citems.find(y=>y.name == citemname);                    \n        }                                    \n        // display label         \n        if (display=='' || display.startsWith(\"%\")){ \n                    \n          //check that this actor has this at all\n          \n          // it could  be a macro\n          if (roll!=''){\n            if (roll.startsWith(\"?\")){ \n              hasthis=true;\n            }\n          }\n          \n          if(!citem){ \n            // actor property\n            property = game.items.find(y=>y.type==\"property\" && y.data.data.attKey==roll); \n            if(property!=null) {  \n              if (['simplenumeric', 'simpletext', 'list', 'checkbox','radio','badge'].indexOf(property.data.data.datatype) >= 0){   \n                 if(actor.data.data.attributes.hasOwnProperty(roll)){\n                  hasthis=true;\n                }                       \n              }\n              else if(property.data.data.datatype=='label'){              \n               hasthis=true;\n              }\n            }                         \n          }             \n          else{\n            // citem\n            if (citem!=null){\n              // has the citem\n              if(citem.attributes.hasOwnProperty(citempropKey)){\n                hasthis=true;\n              } \n            }\n          }  \n          \n          \n          \n          if(hasthis){\n            if(display.startsWith(\"%\")){                  \n              // replace it with fas glyph  //<i class=\"fas fa-dice-d20\"></i>'\n              slabel =  '<i class=\"' + display.substr(1)  + '\"></i>';    \n            }\n            else{\n              // single die icon\n              slabel='<i class=\"fas fa-dice-d20\"></i>';\n            }\n          }\n        }\n        else{                            \n          if(!iscitem){\n            property = game.items.find(y=>y.type==\"property\" && y.data.data.attKey==display);\n            if (property!=null) {\n              //                 \n              // check if this is a value attribute  \n              if (['simplenumeric', 'simpletext', 'list', 'checkbox','radio','badge'].indexOf(property.data.data.datatype) >= 0) {\n                // check that actor has this attribute\n                 if(actor.data.data.attributes.hasOwnProperty(display)){ \n                    if(property.data.data.datatype=='badge'){ \n                      slabel= actor.data.data.attributes[display].value + '(' + actor.data.data.attributes[display].max + ')';\n                    }                                           \n                    else if(property.data.data.datatype=='checkbox'){ \n                      if(actor.data.data.attributes[display].value==true){\n                        slabel='<i class=\"far fa-check-square\"></i>';\n                      }\n                      else{\n                        slabel='<i class=\"far fa-square\"></i>';\n                      }\n                    } \n                    else if(property.data.data.datatype=='radio'){\n                      // add radio glyphs  \n                      for(let i=1;i<=actor.data.data.attributes[display].max;i++){ \n                        if(actor.data.data.attributes[display].value>=i){  \n                          if (property.data.data.radiotype=='C'){\n                            slabel+='<i class=\"fas fa-circle\"></i>';\n                          }\n                          else{  \n                            slabel+='<i class=\"fas fa-square\"></i>';\n                          }\n                        }\n                        else{  \n                          if (property.data.data.radiotype=='C'){\n                            slabel+= '<i class=\"far fa-circle\"></i>';  \n                          }\n                          else{\n                            slabel+='<i class=\"far fa-square\"></i>';\n                          }\n                        }\n                      }\n                    }\n                    else{   \n                    // use the value from targetattributes as label\n                      slabel=actor.data.data.attributes[display].value; \n                    }                  \n                 } \n                 else{\n                    // it should have been here unless this is a diffrent template\n                    slabel='';\n                 }\n              } \n                                                            \n              else if(property.data.data.datatype=='label'){  \n                if(property.data.data.labelformat='D'){                  \n                  // show die glyph   \n                  slabel='<i class=\"fas fa-dice-d20\"></i>';\n                }\n                else{            \n                  slabel=property.data.data.tag;\n                }                 \n              } \n              \n              else{ \n                // unsupported datatype\n                ui.notifications.warn('Unsupported data type for property '+display + ':' + property.data.data.datatype );\n                slabel=property.data.data.datatype;\n              }                               \n              //\n            }\n          }\n          else{  \n            //citem     \n            \n            if (citem!=null){\n              // actor has this citem                                                                            \n              property = game.items.find(y=>y.type==\"property\" && y.data.data.attKey==citempropKey);\n              if (property!=null){     \n                // check if this is a value attribute   \n                if (['simplenumeric', 'simpletext', 'list', 'checkbox','radio','badge'].indexOf(property.data.data.datatype) >= 0) { \n                  if(citem.attributes.hasOwnProperty(citempropKey)){\n                    if(property.data.data.datatype=='badge'){ \n                      slabel= citem.attributes[citempropKey].value + '(' + citem.attributes[citempropKey].max + ')';\n                    }                                           \n                    else if(property.data.data.datatype=='checkbox'){ \n                      if(citem.attributes[citempropKey].value==true){\n                        slabel='<i class=\"far fa-check-square\"></i>';\n                      }\n                      else{\n                        slabel='<i class=\"far fa-square\"></i>';\n                      }\n                    } \n                    else if(property.data.data.datatype=='radio'){\n                      // add radio glyphs  \n                      for(let i=1;i<=citem.attributes[citempropKey].max;i++){ \n                        if(citem.attributes[citempropKey].value>=i){  \n                          if (property.data.data.radiotype=='C'){\n                            slabel+='<i class=\"fas fa-circle\"></i>';\n                          }\n                          else{  \n                            slabel+='<i class=\"fas fa-square\"></i>';\n                          }\n                        }\n                        else{  \n                          if (property.data.data.radiotype=='C'){\n                            slabel+= '<i class=\"far fa-circle\"></i>';  \n                          }\n                          else{\n                            slabel+='<i class=\"far fa-square\"></i>';\n                          }\n                        }\n                      }\n                    }\n                    else{                                                      \n                      // use the value from citem as label                    \n                      slabel=citem.attributes[citempropKey].value;  \n                    }                                        \n                  } \n                  else{\n                    // this citem dont have this attribute\n                    slabel='';\n                  }\n                } \n                else if(property.data.data.datatype=='label'){   \n                   if(property.data.data.labelformat='D'){\n                     // show die glyph   \n                     slabel='<i class=\"fas fa-dice-d20\"></i>';\n                   }\n                   else{\n                     slabel=property.data.data.tag;\n                   }\n                }                              \n                else\n                { \n                  // unsupported datatype\n                  ui.notifications.warn('Unsupported data type for property '+display + ':' + property.data.data.datatype );\n                  slabel=property.data.data.datatype;                  \n                }  \n              }                         \n            }                                    \n          }\n        }\n        // ---------------\n        // roll onclick\n        // ---------------  \n        if(roll==''|| slabel=='' ){\n          // no roll\n        }\n        else{    \n          //debugger;   \n          sclassname='${thisMacroName()}_hbo'; \n          if(roll.startsWith(\"?\")){\n            // macro  \n            stitle='Run macro '+ roll.substr(1);\n            sonclick='onclick=\"${thisMacroName()}_executeMacro(' + ${thisMacroName()}_singleQuoted(actorId) +','+ ${thisMacroName()}_singleQuoted(roll.substr(1)) +',' + useCanvastokens +');\"'\n          }\n          else{ \n            stitle='Roll '+roll;           \n            if(!iscitem){   \n              // actor property\n              property = game.items.find(y=>y.type==\"property\" && y.data.data.attKey==roll); \n              if (property!=null){    \n                let rollexp = property.data.data.rollexp;\n                if (rollexp!=null){\n                  if (rollexp.length>0){                                                                                          \n                    sonclick='onclick=\"${thisMacroName()}_rollActorProperty(' + ${thisMacroName()}_singleQuoted(actorId) +','+ ${thisMacroName()}_singleQuoted(property.id) +',' + useCanvastokens +');\"'                  \n                  }                                                                    \n                }\n              }            \n            }        \n            else{\n              // citem \n              citemname=${thisMacroName()}_splitString(roll,'|',0);\n              citempropKey=${thisMacroName()}_splitString(roll,'|',1); \n              property = game.items.find(y=>y.type==\"property\" && y.data.data.attKey==citempropKey);            \n              if (property!=null){    \n                let rollexp = property.data.data.rollexp;\n                if (rollexp!=null){\n                  if (rollexp.length>0){                                                     \n                    sonclick='onclick=\"${thisMacroName()}_rollActorcItemProperty(' + ${thisMacroName()}_singleQuoted(actorId) +','+ ${thisMacroName()}_singleQuoted(citemname) + ',' + ${thisMacroName()}_singleQuoted(property.id)+','+useCanvastokens +');\"';                  \n                  }                                                                    \n                }\n              }                                                        \n            }        \n          } \n        }\n      }      \n      catch(err){    \n        console.error(err);\n        ui.notifications.error(err);       \n      }           \n      cell.innerHTML='<label title=\"' + stitle +'\" class=\"'+sclassname+'\" ' + sonclick +'>' + slabel+ ' </label>';\n    }\n    \n    function ${thisMacroName()}_ListActorsProperties() {\n      let table = document.getElementById(\"${thisMacroName()}_CharactersProperties\");  \n      let useCanvastokens=0;\n      \n      // empty table\n      if (table.rows.length>0)\n      {\n        for(let i=table.rows.length;i>1;i--){\n          table.deleteRow(-1);\t\n        }\n      }\n      // build table\n      let actors;  \n      let tokens;  \n      let foldername='${Setting_Foldername()}'; \n      let roll;\n      \n      if (foldername!=''){\n        let folder = game.folders.getName(foldername); \n         \n        if (folder!=null){\n          ${thisMacroName()}_foldercolor=folder.data.color\n          actors=folder.content;\n        }\n        else{\n          ui.notifications.warn('Folder ' + foldername + ' not found' );\n        }         \n      }\n      else{\n        // use controlled tokens instead  \n        useCanvastokens=1;\n        tokens = canvas.tokens.controlled; \n      }                   \n      let arrProperties = JSON.parse('${Setting_PropertiesRequested()}');      \n      let tbody = document.getElementById(\"${thisMacroName()}_CharactersPropertiesBody\"); \n      let actorid;\n      \n      if(useCanvastokens==0){  \n        // use game actors                                       \n        for(let actor of actors){\n          //console.log(actor);         \n          let row = tbody.insertRow(-1);\n          row.style.lineHeight=\"12px\";\n          row.insertCell(-1).outerHTML = '<td class=\"${thisMacroName()}_portrait_td\"><img class=\"${thisMacroName()}_portrait_img\"  src=\"' + actor.data.img +'\"</img></td>';\n          row.insertCell(-1).outerHTML = '<td class=\"${thisMacroName()}_actorname_td\"><label title=\"Show actor\"  class=\"${thisMacroName()}_hbo\" onclick=\"${thisMacroName()}_showSheet(' + ${thisMacroName()}_singleQuoted(actor._id) +',' + useCanvastokens +  ');\">' + actor.name +'</label></td>';\n          arrProperties.forEach(function(item){\n            sPropertyName=item.display;            \n            let cell=row.insertCell(-1);\n            cell.style.textAlign = \"center\";                                           \n            if (item.hasOwnProperty('roll')){\n              roll=item.roll;\n            }                \n            else{\n              roll='';\n            }\n            ${thisMacroName()}_DisplayCellContent(cell,actor._id,item.display,roll,useCanvastokens);          \n          });\n        } \n      }\n      else{\n        // use tokens\n        for(let token of tokens){            \n          let row = tbody.insertRow(-1);\n          row.style.lineHeight=\"12px\";\n          row.insertCell(-1).outerHTML = '<td class=\"${thisMacroName()}_portrait_td\"><img title=\"Show token configuration\" class=\"${thisMacroName()}_portrait_img ${thisMacroName()}_hbox\" onclick=\"${thisMacroName()}_showTokenConfiguration(' + ${thisMacroName()}_singleQuoted(token.data._id) +',' + useCanvastokens +  ');\" src=\"' + token.data.img +'\"</img></td>';\n          row.insertCell(-1).outerHTML = '<td class=\"${thisMacroName()}_actorname_td\"><label title=\"Show actor\" class=\"${thisMacroName()}_hbo\" onclick=\"${thisMacroName()}_showSheet(' + ${thisMacroName()}_singleQuoted(token.data._id) +',' + useCanvastokens +  ');\">' + token.data.name +'</label></td>';\n          arrProperties.forEach(function(item){\n            sPropertyName=item.display;            \n            let cell=row.insertCell(-1);\n            cell.style.textAlign = \"center\";  \n            if (item.hasOwnProperty('roll')){\n              roll=item.roll;\n            }                \n            else{\n              roll='';\n            }\n                       \n            ${thisMacroName()}_DisplayCellContent(cell,token.data._id,item.display,roll,useCanvastokens);          \n          });\n        }\n      }\n    } \n    // Main function\n    function ${thisMacroName()}_Main(){ \n      //console.log(\"${thisMacroName()}_Main()\");\n      ${thisMacroName()}_ListActorsProperties();\n    }\n             \n    // Run main\n    ${thisMacroName()}_Main();\n  </script>\n  <!--Marker element to detect if dialog is loaded-->\n  <input type=\"hidden\" id=\"${thisMacroName()}_appId\" value=\"-1\"> \n  <script>  \n    try{\n      \n      if(${Setting_DialogBackground()}>0){  \n        let arrStyles = JSON.parse('${Setting_CustomDialogBackground()}');\n        //debugger;\n        if ('${Setting_Foldername()}'!=''&& '${Setting_DialogBackground()}'<=2 ){\n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.background =${thisMacroName()}_foldercolor;\n        }\n        else{\n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundColor= arrStyles[\"background-color\"];\n        }\n        if('${Setting_DialogBackground()}'>=2){\n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundImage= arrStyles[\"background-image\"];           \n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundRepeat= arrStyles[\"background-repeat\"];\n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundAttachment= arrStyles[\"background-attachment\"]; \n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundPosition= arrStyles[\"background-position\"]; \n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundSize= arrStyles[\"background-size\"]; \n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundOrigin= arrStyles[\"background-origin\"]; \n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundClip= arrStyles[\"background-clip\"];       \n        }        \n      }\n    }\n    catch(err){    \n      console.error(err) ;\n    }\n    \n  </script>\n`;\n  // HTML content completed\n  // check if this already loaded \n  let appId_element=document.getElementById(`${thisMacroName()}_appId`); \n  if (appId_element!=null){\n    // already loaded    \n    let appId=appId_element.getAttribute('value');\n    if (appId!=null){ \n      let app=ui.windows[appId];\n      if (app!=null){    \n        // attempt to bring to the front\n        app.bringToTop(); \n        // and trigger refresh content button\n        let elem = document.getElementById(`${thisMacroName()}_btnRefresh`);\n        if (elem!=null){\n          if (typeof elem.onclick == \"function\") {\n            elem.onclick.apply(elem);\n          }               \n        }\n      }\n    }\n  }\n  else{\n    // show it as dialog, after render update hidden id\n    let d =new Dialog({\n     title: `${macroTitle()}`,\n     content: html_content,\n     buttons: {},\n     render: html => document.getElementById(`${thisMacroName()}_appId`).setAttribute('value',d.appId),\n    });\n    d.options.width = Setting_FormWidth();\n    d.position.width = Setting_FormWidth();\n    d.options.resizable=true;\n    d.render(true);        \n  }","folder":null,"sort":50001,"permission":{"default":0,"NLu8dzFBI3Kvrwky":3},"flags":{"advanced-macros":{"runAsGM":false}}}
{"name":"toggle-playlist-sound","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3,"NLu8dzFBI3Kvrwky":3},"type":"script","folder":null,"sort":200001,"flags":{},"scope":"global","command":"/* This macro requires the advanced macros of Furnace and Playlist QoL\r\n * This will toggle the playing state of a sound in your playlists\r\n * Takes the playlist name as first argument, and the sound name as second argument \r\n * Example: /toggle-playlist-sound \"SFX\" \"Sword Clash\"\r\n */\r\n\r\nFurnacePlaylistQoL.PlaySound(args[0], args[1]);","author":"NLu8dzFBI3Kvrwky","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"G5f0HstL2k59TITQ"}
{"_id":"OPW7rVUFita4Ahay","name":"Visor de PNJs","type":"script","author":"NLu8dzFBI3Kvrwky","img":"icons/svg/dice-target.svg","scope":"global","command":"//                                                                  \n// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \n//                                                                  \n//                     Settings for this macro                      \n//                                                                  \n// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \n// \nfunction Setting_Foldername() {\n  let foldername;\n  foldername='Parte 2-3';  // set folder to empty string to use selected(controlled) tokens instead  \n  //foldername='Goblins'; \n  return foldername; \n }     \nfunction Setting_PropertiesTitle(){\n  return 'PNJs Campaña';  // use this if you have several instances of this macro running, this will add this text to the title of the displayed form, makes it easier to tell them apart\n  }\n                                                                                                                                        \nfunction Setting_PropertiesRequested() {\nlet objPropertiesToDisplay = [\n{\"display\":\"pv\",\"columnheader\":\"PV\"},\n{\"display\":\"temp\",\"roll\":\"temp\",\"columnheader\":\"Templanza\"},\n{\"display\":\"irracio\",\"roll\":\"irracio\",\"columnheader\":\"Irracionalidad\"},\n{\"display\":\"racio\",\"roll\":\"racio\",\"columnheader\":\"Racionalidad\"},\n{\"display\":\"suer_roll\",\"roll\":\"suer_roll\",\"columnheader\":\"Suerte\"},\n{\"display\":\"esqu\",\"roll\":\"esqu\",\"columnheader\":\"Esquivar\"},\n{\"display\":\"c_pelea\",\"roll\":\"c_pelea\",\"columnheader\":\"Pelea\"},\n{\"display\":\"c_cuch\",\"roll\":\"c_cuch\",\"columnheader\":\"Cuchillos\"},\n{\"display\":\"c_palo\",\"roll\":\"c_palo\",\"columnheader\":\"Palos\"},\n];\n  return JSON.stringify(objPropertiesToDisplay); \n  \n// Format for each properties\n//  {\"display\":\"<Property to use as display label>\",\"roll\":\"<Property to use the rollexpression from>\",\"columnheader\":\"<Any text string>\",\"columnheadertooltip\":\"<Any text string>\"}\n//\n// Field \"display\"\n//  - required but can be an empty string(will display the d20 glyph) \n// Field \"roll\"\n//  - optional but needs a non-empty string to generate a clickable link that executes a roll\n// Field \"columnheader\"\n//  - optional. If not specified, the display or roll property will be used\n// Field \"columnheadertooltip\" \n//  - is optional but useful when using icons in the header\n//  - if not specified, the macro will use the tooltip of the display or roll property \n// \n// to use a cItem in  display or roll field, use \"<cItem name>|<cItem property>\"\n// To use a FontAwesome glyph(https://fontawesome.com/icons?d=gallery&p=2&m=free) in columnheader or display, use \"%fas fa-<icon name>\".\n// to call a macro from roll field use \"?<macroname>\"- The macro will execute with two arguments, actor/tokenid and if it is a token on a scene\n// If you have the module The Furnace installed you can use the arguments in your function like this\n\n//Example script macro(named \"Hello\") to call\n//function ShowImg(actorId,useCanvastokens){\n//let actor;\n//let token; \n//let simg;\n//let sname;\n//if(useCanvastokens==0){\n//  actor = game.actors.get(actorId);\n//  if(actor!=null){\n//    simg=actor.data.img;\n//    sname=actor.name;         \n//  }\n//}\n//else{                \n//  token = canvas.tokens.get(actorId);\n//  if(token!=null){\n//    simg=token.data.img;\n//    sname=token.data.name;\n//  }           \n//}\n//ChatMessage.create({\n//    content : '<p>' +sname +'</p> <img src=\"' + simg + '\" />'\n//  });\n//}\n//ShowImg(args[0],args[1]);\n\n// Example for properties\n//let objPropertiesToDisplay = [\n//{\"display\":\"Body\"},\n//{\"display\":\"Body\",\"roll\":\"Body\"},\n//{\"display\":\"Body\",\"roll\":\"Body\",\"columnheader\":\"BOD\"},\n//{\"display\":\"Body\",\"roll\":\"Body\",\"columnheader\":\"BOD\",\"columnheadertooltip\":\"Body property\"},\n//{\"display\":\"Body\",\"roll\":\"Body\",\"columnheader\":\"%fas fa-child\",\"columnheadertooltip\":\"Body property\"},\n//{\"display\":\"Body\",\"roll\":\"Body\",\"columnheader\":\"%fas fa-child\"},\n//{\"display\":\"\",\"roll\":\"Body\"}, \n//{\"display\":\"%fas fa-child\",\"roll\":\"Body\"},  \n//{\"display\":\"Body\",\"roll\":\"HealthCheck\",\"columnheader\":\"Health check\"}, \n//{\"display\":\"Mind\",\"roll\":\"Mind\",\"columnheader\":\"%fas fa-graduation-cap\",\"columnheadertooltip\":\"Mind property\"},\n//{\"display\":\"Stamina\",\"roll\":\"\",\"columnheader\":\"%fas fa-heart\",\"columnheadertooltip\":\"Stamina property\"},\n//{\"display\":\"HairColor\",\"roll\":\"\",\"columnheader\":\"Hair Color\"},\n//{\"display\":\"HairColor\",\"roll\":\"\",\"columnheader\":\"%fas fa-user-ninja\"},\n//{\"display\":\"Gender\",\"roll\":\"\",\"columnheader\":\"Gender\"},\n//{\"display\":\"HasMagic\",\"roll\":\"\",\"columnheader\":\"Has Magic\"},\n//{\"display\":\"%fas fa-code\",\"roll\":\"?Hello\",\"columnheader\":\"Macro\",\"columnheadertooltip\":\"Execute macro\"},\n//{\"display\":\"Rating\",\"roll\":\"\",\"columnheader\":\"Rating\"},\n//{\"display\":\"FatePoints\",\"roll\":\"\",\"columnheader\":\"Fate Pts\"},\n//{\"display\":\"Armed Combat|SkillRank\",\"roll\":\"Armed Combat|SkillRoll\",\"columnheader\":\"Armed Combat Rank(cItem)\"},\n//{\"display\":\"Armed Combat|SkillRoll\",\"roll\":\"Armed Combat|SkillRoll\",\"columnheader\":\"Armed Combat Roll(cItem)\"},\n//{\"display\":\"Ranged Combat|SkillRank\",\"roll\":\"Ranged Combat|SkillRoll\",\"columnheader\":\"Ranged Combat(cItem)\"}\n//];\n \n}  \n \nfunction Setting_DialogBackground(){\n  // return 0 - default\n  // return 1 - use folder color(if folder view)\n  // return 2 - use folder color(if folder view) with custom background(set in Setting_CustomDialogBackground)\n  // return 3 - use custom background(set in Setting_CustomDialogBackground)\n  let returnvalue = 3;\n  return returnvalue;\n}     \n \nfunction Setting_CustomDialogBackground(){ \n // note about URL, needs escaping of double quotes with 3 backslashes(\\\\\\) example \"url(\\\\\\\"../ui/anvil-bg-bw.png\\\\\\\")\" \n // to get a solid backcolor, set backgound-image to \"none\"\n let objCustomDialogBackground=\n {\"background-color\":\"orange\",\n \"background-image\":\"url(\\\\\\\"../ui/anvil-bg-bw.png\\\\\\\")\",      \n \"background-repeat\":\"no-repeat\",\n \"background-attachment\":\"local\",\n \"background-position\":\"bottom right\",\n \"background-size\":\"200px\",\n \"background-origin\":\"\",\n \"background-clip\":\"\"}\n ;\n return JSON.stringify(objCustomDialogBackground);\n}\n\nfunction Setting_TableCSS(){  \n  return \"color:black;\";\n}\n\nfunction Setting_HoverColor(){  \n  return \"darkred\";  // any css color\n}\n\n\n\nfunction Setting_FormWidth(){return 0;} // set to 0 to autosize \n//                                                                  \n// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \n//                                                                  \n//                        Macro generic code                        \n//                                                                  \n// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \n//         \n// **************************************************************** \n// Macro:         Quick Character Overview                         \n// ================================================================ \n// Date       Version  Author               Description             \n// ---------- -------- -------------------- -----------------------\n// 2021-03-22 1.0.0    Ramses800            Macro created. \n// 2021-03-23 1.1.0    Ramses800            Updates.\n// 2021-03-23 1.2.0    Ramses800            Updates.\n// 2021-03-23 1.3.0    Ramses800            Updates.\n// 2021-04-01 2.0.0    Ramses800            Complete rewrite. \n// 2021-04-02 2.0.1    Ramses800            Added simpletext,list,checkbox,radio & macros   \n// 2021-04-02 2.0.2    Ramses800            Fixes\n// 2021-04-08 2.0.3    Ramses800            Fixes\n// 2021-04-10 2.0.4    Ramses800            simplification of conf   \n// 2021-04-16 2.0.5    Ramses800            background colors\n// 2021-08-30 2.0.6    Ramses800            table css      \n// ****************************************************************                                                                                                                                         \nfunction macroTitle() {\n  let thismacroname=`Visor de PNJ´s`;\n  if (Setting_PropertiesTitle()!=''){\n    thismacroname=thismacroname + `(`+ Setting_PropertiesTitle() +`)` ;\n  }\n  if(Setting_Foldername()==''){ \n    return thismacroname + ` - Selected token(s)`;\n  }\n  else{   \n    return thismacroname + ` - ${Setting_Foldername()}`;\n  }\n}\n\n\n// This is used to convert texts into javascript/programmable acceptable definitions\nfunction slugify(text,separator) {\n  return text\n    .toString()\n    .normalize('NFD')                   // split an accented letter in the base letter and the acent\n    .replace(/[\\u0300-\\u036f]/g, '')   // remove all previously split accents\n    .toLowerCase()\n    .trim()\n    .replace(/[^a-z0-9 ]/g, '')   // remove all chars not letters, numbers and spaces (to be replaced)\n    .replace(/\\s+/g, separator);\n}\n// This is used to make sure that function styles id etc are unique in the total namespace\n// if not unique, then macros/other functinalities could be intermixed and produce unpredictable results\nfunction thisMacroName(){return `${slugify(macroTitle(),'_')}`;  } \n\n// --------------\n// dialog content\n// -------------- \nlet html_content = ` \n  <!--macro custom styles-->\n  <style>  \n    .${thisMacroName()}_hbo:hover {cursor: pointer;color: ${Setting_HoverColor()};    font-weight: bold;}    \n    .${thisMacroName()}_hbox:hover {box-shadow:0 0 0 2px ${Setting_HoverColor()};cursor: pointer;}  \n    \n    table.${thisMacroName()}_table{\n       ${Setting_TableCSS()}\n    }  \n    \n    th.${thisMacroName()}_refresh_th{text-align:left;padding:0px 0px 0px 6px;width:48px;min-width:48px;max-width:48px;min-height:24px;height: 24px;} \n    th.${thisMacroName()}_property_th{padding:0px 3px 0px 3px;}  \n    td.${thisMacroName()}_actorname_td{padding-left:4px;}\n    img.${thisMacroName()}_portrait_img{height:48px;width:48px;min-width:48px;object-fit:cover;object-position:50% 0;margin: 0 8px 0 2px;border: none;}  \n    td.${thisMacroName()}_portrait_td{text-align:left;width:48px;min-width:48px;max-width:48px;display: block;padding:2px 0px 0px 2px;vertical-align:middle;}\n  </style> \n  \n  <!--macro dialog content-->  \n  \n  <table id=\"${thisMacroName()}_CharactersProperties\" class=\"${thisMacroName()}_table\">\n    <thead>\n    <tr id=\"${thisMacroName()}_CharactersPropertiesHeaderRow\"><th class=\"${thisMacroName()}_refresh_th\"><i id=\"${thisMacroName()}_btnRefresh\" title=\"Refresh\" class=\"fas fa-redo-alt ${thisMacroName()}_hbo\" onclick=\"${thisMacroName()}_Main()\"></i></th><th></th></tr>\n    </thead>\n    <tbody id=\"${thisMacroName()}_CharactersPropertiesBody\" >\n    </tbody>\n  </table>     \n    \n  <!--macro dialog scripts-->     \n  <script>\n    if (typeof ${thisMacroName()}_foldercolor === 'undefined'){  \n      let ${thisMacroName()}_foldercolor;\n    }\n   // support functions\n    function ${thisMacroName()}_singleQuote()  {return '&quot;';} \n    function ${thisMacroName()}_singleQuoted(text)  {return '&quot;' + text + '&quot;';}  \n    \n      \n    function ${thisMacroName()}_splitString(sInput,sSeparator,iFieldNr){\n      let arr=sInput.split(sSeparator);\n      if(arr.length>0 && arr.length>iFieldNr )      {\n        return arr[iFieldNr];\n      }\n      else{\n        return sInput;\n      }\n    }\n    \n    function ${thisMacroName()}_executeMacro(actorId,macroname,useCanvastokens=0 ){  \n       \n      let macro = game.macros.getName(macroname);  \n      if (macro!=null){   \n        macro.execute(actorId,useCanvastokens);\n      }\n      else{\n        ui.notifications.warn('Macro ' + macroname +' not found');\n      }\n    }\n    \n    function ${thisMacroName()}_rollActorProperty(actorId,sPropertyId,useCanvastokens=0 ){\n      let actor;\n      let token;  \n      if(useCanvastokens==0){\n        actor = game.actors.get(actorId);         \n      }\n      else{                \n        token = canvas.tokens.get(actorId);\n        if(token!=null){\n            actor=token.actor;\n          }           \n      }                        \n      if(actor!=null){             \n        let actorattributes = actor.data.data.attributes;\n        let rollexp;\n        let rollname;\n        let rollid = [];\n        let property = game.items.get(sPropertyId );\n        rollexp = property.data.data.rollexp;\n        rollname = property.data.data.rollname;\n        rollid.push(property.data.data.rollid);   \n        \n        actor.rollSheetDice(rollexp,rollname,rollid,actorattributes,null); \n       }\n    }      \n      \n    function ${thisMacroName()}_rollActorcItemProperty(actorId,citemname,sPropertyId,useCanvastokens=0){ \n      let actor;  \n      let token; \n      if(useCanvastokens==0){\n        actor = game.actors.get(actorId);\n      }\n      else{\n        // try to get it from scene\n        token = canvas.tokens.get(actorId); \n        if(token!=null){\n          actor=token.actor;\n        }    \n      }\n      //console.log(actor);\n      if(actor!=null){          \n        let citem = actor.data.data.citems.find(y=>y.name == citemname);\n        let property = game.items.get(sPropertyId);  \n        let citemattributes = citem.attributes;\n        rollexp = property.data.data.rollexp;\n        rollname = property.data.data.rollname;         \n        actor.rollSheetDice(rollexp,rollname,null,actor.data.data.attributes,citemattributes); \n      }\n    }\n    function ${thisMacroName()}_showSheet(actorId,useCanvastokens=0){\n      let actor;\n      let token;           \n      if(useCanvastokens==0){\n        actor = game.actors.get(actorId);   \n      } \n      else{  \n        token = canvas.tokens.get(actorId); \n        if(token!=null){   \n          actor=token.actor;\n        }    \n      }    \n      if(actor!=null){\n        actor.sheet.render(true);\n      }\n    }\n    \n    function ${thisMacroName()}_showTokenConfiguration(actorId,useCanvastokens=0){\n      let actor;\n      let token;   \n           \n      if(useCanvastokens==0){\n        actor = game.actors.get(actorId);\n        if(actor!=null){\n          token=actor.data.token; \n          // this token wont work\n        }    \n      } \n      else{  \n        token = canvas.tokens.get(actorId); \n        if(token!=null){   \n          actor=token.actor;\n        }    \n      }\n      if(token!=null){\n        token.sheet.render(true);\n      }\n    }        \n    \n    function ${thisMacroName()}_AddPropertiesHeaders(){\n      let headerrow=document.getElementById(\"${thisMacroName()}_CharactersPropertiesHeaderRow\");\n      let arrProperties = JSON.parse('${Setting_PropertiesRequested()}');\n      let columnheader='';\n      let title=''; \n      let headerproperty;\n      let iscitem=false; \n      let citemname; \n      let propkey;  \n      let tooltip='';  \n      let headeritem='';\n      arrProperties.forEach(function(item){\n        columnheader =  '<i class=\"fas fa-dice-d20\"></i>'; // default  \n        title='';       \n        tooltip='';\n        headeritem='';\n        if (item.hasOwnProperty('columnheadertooltip')){\n          title='title=\"' + item.columnheadertooltip  + '\"';\n        }    \n        else{                   \n          // try getting the tooltip from display or roll\n          if(item.display!='' && !item.display.startsWith(\"%\")){\n            headeritem=item.display;\n          }\n          else{\n            if (item.hasOwnProperty('roll')){ \n              if(item.roll!=''){\n                headeritem = item.roll;\n              }\n            }\n          }   \n          if (headeritem!=''){\n            // determine attribute or citem\n            if (headeritem.indexOf('|')>-1){          \n              iscitem=true; \n              citemname=${thisMacroName()}_splitString(headeritem,'|',0);\n              propkey=${thisMacroName()}_splitString(headeritem,'|',1);                                \n            }      \n            else{\n              propkey=headeritem;\n            }\n          \n            // try to get it from the propertys tooltip\n            headerproperty = game.items.find(y=>y.type==\"property\" && y.data.data.attKey==propkey);\n            if (headerproperty!=null) { \n                  \n              if (headerproperty.data.data.hasOwnProperty('tooltip')){ \n                tooltip= headerproperty.data.data.tooltip;\n                if (tooltip!=''){\n                  if (iscitem){\n                    title='title=\"' + citemname + ' - ' + tooltip  + '\"';\n                  }\n                  else{\n                    title='title=\"' + tooltip  + '\"';\n                  }   \n                }\n              }             \n            }  \n          }          \n        }\n        \n        if (item.hasOwnProperty('columnheader')){         \n          if(item.columnheader.startsWith(\"%\")){\n            // replace it with fas glyph  //<i class=\"fas fa-dice-d20\"></i>'\n            columnheader =  '<i class=\"' + item.columnheader.substr(1)  + '\"></i>';      \n          }\n          else\n          {       \n             columnheader= item.columnheader;\n          }   \n        } \n        else{\n          // use display    \n          if(item.display==''){\n            // try to use the roll instead\n            if (item.hasOwnProperty('roll')){ \n              if(item.roll!=''){\n                columnheader = item.roll;\n              }\n            }             \n          }\n          else{    \n            if(item.display.startsWith(\"%\")){\n            // replace it with fas glyph  //<i class=\"fas fa-dice-d20\"></i>'\n            columnheader =  '<i class=\"' + item.display.substr(1)  + '\"></i>';      \n            }\n            else\n            {                      \n               columnheader=item.display;\n            }                                              \n          }\n        }\n        headerrow.insertCell(-1).outerHTML = '<th class=\"${thisMacroName()}_property_th\" '+title+' >' + columnheader +  '</th>';\n      });\n    }\n       \n    ${thisMacroName()}_AddPropertiesHeaders();\n    \n    function ${thisMacroName()}_DisplayCellContent(cell,actorId,display,roll,useCanvastokens=0){      \n      let slabel='';\n      let sonclick='';\n      let sclassname='';\n      let stitle='';\n      let iscitem=false; \n      let citemname;   \n      let citempropKey;\n      let property;   \n      let actor;\n      let token;\n      let citem;\n      let hasthis=false; \n            \n      try{ \n        if(useCanvastokens==0){\n          actor = game.actors.get(actorId);    \n        } \n        else{  \n          token = canvas.tokens.get(actorId); \n          if(token!=null){   \n            actor=token.actor;\n          }    \n        }               \n        \n        // determine attribute or citem\n        if (display.indexOf('|')>-1){          \n          iscitem=true; \n          citemname=${thisMacroName()}_splitString(display,'|',0);\n          citempropKey=${thisMacroName()}_splitString(display,'|',1);\n          citem = actor.data.data.citems.find(y=>y.name == citemname);                    \n        }                                    \n        // display label         \n        if (display=='' || display.startsWith(\"%\")){ \n                    \n          //check that this actor has this at all\n          \n          // it could  be a macro\n          if (roll!=''){\n            if (roll.startsWith(\"?\")){ \n              hasthis=true;\n            }\n          }\n          \n          if(!citem){ \n            // actor property\n            property = game.items.find(y=>y.type==\"property\" && y.data.data.attKey==roll); \n            if(property!=null) {  \n              if (['simplenumeric', 'simpletext', 'list', 'checkbox','radio','badge'].indexOf(property.data.data.datatype) >= 0){   \n                 if(actor.data.data.attributes.hasOwnProperty(roll)){\n                  hasthis=true;\n                }                       \n              }\n              else if(property.data.data.datatype=='label'){              \n               hasthis=true;\n              }\n            }                         \n          }             \n          else{\n            // citem\n            if (citem!=null){\n              // has the citem\n              if(citem.attributes.hasOwnProperty(citempropKey)){\n                hasthis=true;\n              } \n            }\n          }  \n          \n          \n          \n          if(hasthis){\n            if(display.startsWith(\"%\")){                  \n              // replace it with fas glyph  //<i class=\"fas fa-dice-d20\"></i>'\n              slabel =  '<i class=\"' + display.substr(1)  + '\"></i>';    \n            }\n            else{\n              // single die icon\n              slabel='<i class=\"fas fa-dice-d20\"></i>';\n            }\n          }\n        }\n        else{                            \n          if(!iscitem){\n            property = game.items.find(y=>y.type==\"property\" && y.data.data.attKey==display);\n            if (property!=null) {\n              //                 \n              // check if this is a value attribute  \n              if (['simplenumeric', 'simpletext', 'list', 'checkbox','radio','badge'].indexOf(property.data.data.datatype) >= 0) {\n                // check that actor has this attribute\n                 if(actor.data.data.attributes.hasOwnProperty(display)){ \n                    if(property.data.data.datatype=='badge'){ \n                      slabel= actor.data.data.attributes[display].value + '(' + actor.data.data.attributes[display].max + ')';\n                    }                                           \n                    else if(property.data.data.datatype=='checkbox'){ \n                      if(actor.data.data.attributes[display].value==true){\n                        slabel='<i class=\"far fa-check-square\"></i>';\n                      }\n                      else{\n                        slabel='<i class=\"far fa-square\"></i>';\n                      }\n                    } \n                    else if(property.data.data.datatype=='radio'){\n                      // add radio glyphs  \n                      for(let i=1;i<=actor.data.data.attributes[display].max;i++){ \n                        if(actor.data.data.attributes[display].value>=i){  \n                          if (property.data.data.radiotype=='C'){\n                            slabel+='<i class=\"fas fa-circle\"></i>';\n                          }\n                          else{  \n                            slabel+='<i class=\"fas fa-square\"></i>';\n                          }\n                        }\n                        else{  \n                          if (property.data.data.radiotype=='C'){\n                            slabel+= '<i class=\"far fa-circle\"></i>';  \n                          }\n                          else{\n                            slabel+='<i class=\"far fa-square\"></i>';\n                          }\n                        }\n                      }\n                    }\n                    else{   \n                    // use the value from targetattributes as label\n                      slabel=actor.data.data.attributes[display].value; \n                    }                  \n                 } \n                 else{\n                    // it should have been here unless this is a diffrent template\n                    slabel='';\n                 }\n              } \n                                                            \n              else if(property.data.data.datatype=='label'){  \n                if(property.data.data.labelformat='D'){                  \n                  // show die glyph   \n                  slabel='<i class=\"fas fa-dice-d20\"></i>';\n                }\n                else{            \n                  slabel=property.data.data.tag;\n                }                 \n              } \n              \n              else{ \n                // unsupported datatype\n                ui.notifications.warn('Unsupported data type for property '+display + ':' + property.data.data.datatype );\n                slabel=property.data.data.datatype;\n              }                               \n              //\n            }\n          }\n          else{  \n            //citem     \n            \n            if (citem!=null){\n              // actor has this citem                                                                            \n              property = game.items.find(y=>y.type==\"property\" && y.data.data.attKey==citempropKey);\n              if (property!=null){     \n                // check if this is a value attribute   \n                if (['simplenumeric', 'simpletext', 'list', 'checkbox','radio','badge'].indexOf(property.data.data.datatype) >= 0) { \n                  if(citem.attributes.hasOwnProperty(citempropKey)){\n                    if(property.data.data.datatype=='badge'){ \n                      slabel= citem.attributes[citempropKey].value + '(' + citem.attributes[citempropKey].max + ')';\n                    }                                           \n                    else if(property.data.data.datatype=='checkbox'){ \n                      if(citem.attributes[citempropKey].value==true){\n                        slabel='<i class=\"far fa-check-square\"></i>';\n                      }\n                      else{\n                        slabel='<i class=\"far fa-square\"></i>';\n                      }\n                    } \n                    else if(property.data.data.datatype=='radio'){\n                      // add radio glyphs  \n                      for(let i=1;i<=citem.attributes[citempropKey].max;i++){ \n                        if(citem.attributes[citempropKey].value>=i){  \n                          if (property.data.data.radiotype=='C'){\n                            slabel+='<i class=\"fas fa-circle\"></i>';\n                          }\n                          else{  \n                            slabel+='<i class=\"fas fa-square\"></i>';\n                          }\n                        }\n                        else{  \n                          if (property.data.data.radiotype=='C'){\n                            slabel+= '<i class=\"far fa-circle\"></i>';  \n                          }\n                          else{\n                            slabel+='<i class=\"far fa-square\"></i>';\n                          }\n                        }\n                      }\n                    }\n                    else{                                                      \n                      // use the value from citem as label                    \n                      slabel=citem.attributes[citempropKey].value;  \n                    }                                        \n                  } \n                  else{\n                    // this citem dont have this attribute\n                    slabel='';\n                  }\n                } \n                else if(property.data.data.datatype=='label'){   \n                   if(property.data.data.labelformat='D'){\n                     // show die glyph   \n                     slabel='<i class=\"fas fa-dice-d20\"></i>';\n                   }\n                   else{\n                     slabel=property.data.data.tag;\n                   }\n                }                              \n                else\n                { \n                  // unsupported datatype\n                  ui.notifications.warn('Unsupported data type for property '+display + ':' + property.data.data.datatype );\n                  slabel=property.data.data.datatype;                  \n                }  \n              }                         \n            }                                    \n          }\n        }\n        // ---------------\n        // roll onclick\n        // ---------------  \n        if(roll==''|| slabel=='' ){\n          // no roll\n        }\n        else{    \n          //debugger;   \n          sclassname='${thisMacroName()}_hbo'; \n          if(roll.startsWith(\"?\")){\n            // macro  \n            stitle='Run macro '+ roll.substr(1);\n            sonclick='onclick=\"${thisMacroName()}_executeMacro(' + ${thisMacroName()}_singleQuoted(actorId) +','+ ${thisMacroName()}_singleQuoted(roll.substr(1)) +',' + useCanvastokens +');\"'\n          }\n          else{ \n            stitle='Roll '+roll;           \n            if(!iscitem){   \n              // actor property\n              property = game.items.find(y=>y.type==\"property\" && y.data.data.attKey==roll); \n              if (property!=null){    \n                let rollexp = property.data.data.rollexp;\n                if (rollexp!=null){\n                  if (rollexp.length>0){                                                                                          \n                    sonclick='onclick=\"${thisMacroName()}_rollActorProperty(' + ${thisMacroName()}_singleQuoted(actorId) +','+ ${thisMacroName()}_singleQuoted(property.id) +',' + useCanvastokens +');\"'                  \n                  }                                                                    \n                }\n              }            \n            }        \n            else{\n              // citem \n              citemname=${thisMacroName()}_splitString(roll,'|',0);\n              citempropKey=${thisMacroName()}_splitString(roll,'|',1); \n              property = game.items.find(y=>y.type==\"property\" && y.data.data.attKey==citempropKey);            \n              if (property!=null){    \n                let rollexp = property.data.data.rollexp;\n                if (rollexp!=null){\n                  if (rollexp.length>0){                                                     \n                    sonclick='onclick=\"${thisMacroName()}_rollActorcItemProperty(' + ${thisMacroName()}_singleQuoted(actorId) +','+ ${thisMacroName()}_singleQuoted(citemname) + ',' + ${thisMacroName()}_singleQuoted(property.id)+','+useCanvastokens +');\"';                  \n                  }                                                                    \n                }\n              }                                                        \n            }        \n          } \n        }\n      }      \n      catch(err){    \n        console.error(err);\n        ui.notifications.error(err);       \n      }           \n      cell.innerHTML='<label title=\"' + stitle +'\" class=\"'+sclassname+'\" ' + sonclick +'>' + slabel+ ' </label>';\n    }\n    \n    function ${thisMacroName()}_ListActorsProperties() {\n      let table = document.getElementById(\"${thisMacroName()}_CharactersProperties\");  \n      let useCanvastokens=0;\n      \n      // empty table\n      if (table.rows.length>0)\n      {\n        for(let i=table.rows.length;i>1;i--){\n          table.deleteRow(-1);\t\n        }\n      }\n      // build table\n      let actors;  \n      let tokens;  \n      let foldername='${Setting_Foldername()}'; \n      let roll;\n      \n      if (foldername!=''){\n        let folder = game.folders.getName(foldername); \n         \n        if (folder!=null){\n          ${thisMacroName()}_foldercolor=folder.data.color\n          actors=folder.content;\n        }\n        else{\n          ui.notifications.warn('Folder ' + foldername + ' not found' );\n        }         \n      }\n      else{\n        // use controlled tokens instead  \n        useCanvastokens=1;\n        tokens = canvas.tokens.controlled; \n      }                   \n      let arrProperties = JSON.parse('${Setting_PropertiesRequested()}');      \n      let tbody = document.getElementById(\"${thisMacroName()}_CharactersPropertiesBody\"); \n      let actorid;\n      \n      if(useCanvastokens==0){  \n        // use game actors                                       \n        for(let actor of actors){\n          //console.log(actor);         \n          let row = tbody.insertRow(-1);\n          row.style.lineHeight=\"12px\";\n          row.insertCell(-1).outerHTML = '<td class=\"${thisMacroName()}_portrait_td\"><img class=\"${thisMacroName()}_portrait_img\"  src=\"' + actor.data.img +'\"</img></td>';\n          row.insertCell(-1).outerHTML = '<td class=\"${thisMacroName()}_actorname_td\"><label title=\"Show actor\"  class=\"${thisMacroName()}_hbo\" onclick=\"${thisMacroName()}_showSheet(' + ${thisMacroName()}_singleQuoted(actor._id) +',' + useCanvastokens +  ');\">' + actor.name +'</label></td>';\n          arrProperties.forEach(function(item){\n            sPropertyName=item.display;            \n            let cell=row.insertCell(-1);\n            cell.style.textAlign = \"center\";                                           \n            if (item.hasOwnProperty('roll')){\n              roll=item.roll;\n            }                \n            else{\n              roll='';\n            }\n            ${thisMacroName()}_DisplayCellContent(cell,actor._id,item.display,roll,useCanvastokens);          \n          });\n        } \n      }\n      else{\n        // use tokens\n        for(let token of tokens){            \n          let row = tbody.insertRow(-1);\n          row.style.lineHeight=\"12px\";\n          row.insertCell(-1).outerHTML = '<td class=\"${thisMacroName()}_portrait_td\"><img title=\"Show token configuration\" class=\"${thisMacroName()}_portrait_img ${thisMacroName()}_hbox\" onclick=\"${thisMacroName()}_showTokenConfiguration(' + ${thisMacroName()}_singleQuoted(token.data._id) +',' + useCanvastokens +  ');\" src=\"' + token.data.img +'\"</img></td>';\n          row.insertCell(-1).outerHTML = '<td class=\"${thisMacroName()}_actorname_td\"><label title=\"Show actor\" class=\"${thisMacroName()}_hbo\" onclick=\"${thisMacroName()}_showSheet(' + ${thisMacroName()}_singleQuoted(token.data._id) +',' + useCanvastokens +  ');\">' + token.data.name +'</label></td>';\n          arrProperties.forEach(function(item){\n            sPropertyName=item.display;            \n            let cell=row.insertCell(-1);\n            cell.style.textAlign = \"center\";  \n            if (item.hasOwnProperty('roll')){\n              roll=item.roll;\n            }                \n            else{\n              roll='';\n            }\n                       \n            ${thisMacroName()}_DisplayCellContent(cell,token.data._id,item.display,roll,useCanvastokens);          \n          });\n        }\n      }\n    } \n    // Main function\n    function ${thisMacroName()}_Main(){ \n      //console.log(\"${thisMacroName()}_Main()\");\n      ${thisMacroName()}_ListActorsProperties();\n    }\n             \n    // Run main\n    ${thisMacroName()}_Main();\n  </script>\n  <!--Marker element to detect if dialog is loaded-->\n  <input type=\"hidden\" id=\"${thisMacroName()}_appId\" value=\"-1\"> \n  <script>  \n    try{\n      \n      if(${Setting_DialogBackground()}>0){  \n        let arrStyles = JSON.parse('${Setting_CustomDialogBackground()}');\n        //debugger;\n        if ('${Setting_Foldername()}'!=''&& '${Setting_DialogBackground()}'<=2 ){\n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.background =${thisMacroName()}_foldercolor;\n        }\n        else{\n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundColor= arrStyles[\"background-color\"];\n        }\n        if('${Setting_DialogBackground()}'>=2){\n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundImage= arrStyles[\"background-image\"];           \n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundRepeat= arrStyles[\"background-repeat\"];\n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundAttachment= arrStyles[\"background-attachment\"]; \n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundPosition= arrStyles[\"background-position\"]; \n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundSize= arrStyles[\"background-size\"]; \n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundOrigin= arrStyles[\"background-origin\"]; \n          document.getElementById(\"${thisMacroName()}_appId\").parentElement.parentElement.style.backgroundClip= arrStyles[\"background-clip\"];       \n        }        \n      }\n    }\n    catch(err){    \n      console.error(err) ;\n    }\n    \n  </script>\n`;\n  // HTML content completed\n  // check if this already loaded \n  let appId_element=document.getElementById(`${thisMacroName()}_appId`); \n  if (appId_element!=null){\n    // already loaded    \n    let appId=appId_element.getAttribute('value');\n    if (appId!=null){ \n      let app=ui.windows[appId];\n      if (app!=null){    \n        // attempt to bring to the front\n        app.bringToTop(); \n        // and trigger refresh content button\n        let elem = document.getElementById(`${thisMacroName()}_btnRefresh`);\n        if (elem!=null){\n          if (typeof elem.onclick == \"function\") {\n            elem.onclick.apply(elem);\n          }               \n        }\n      }\n    }\n  }\n  else{\n    // show it as dialog, after render update hidden id\n    let d =new Dialog({\n     title: `${macroTitle()}`,\n     content: html_content,\n     buttons: {},\n     render: html => document.getElementById(`${thisMacroName()}_appId`).setAttribute('value',d.appId),\n    });\n    d.options.width = Setting_FormWidth();\n    d.position.width = Setting_FormWidth();\n    d.options.resizable=true;\n    d.render(true);        \n  }","folder":null,"sort":50001,"permission":{"default":0,"NLu8dzFBI3Kvrwky":3},"flags":{"advanced-macros":{"runAsGM":false}}}
{"_id":"V6sd47IAiDxGi17Q","name":"Generador de pnjs","type":"script","author":"NLu8dzFBI3Kvrwky","img":"modules/game-icons-net/whitetransparent/frankenstein-creature.svg","scope":"global","command":"let table1 = game.tables.getName(\"1 - Caracteristicas\")\nlet table2 = game.tables.getName(\"2 - Características secundarias\")\nlet table3 = game.tables.getName(\"3 - Profesiones\")\nlet table4 = game.tables.getName(\"4 - Orgullos\")\nlet table5 = game.tables.getName(\"5 - Vergüenzas\")\nlet table6 = game.tables.getName(\"Nombres femeninos\")\nlet table7 = game.tables.getName(\"Nombres masculinos\")\n\nlet roll1 = await table1.roll();\nlet roll2 = await table2.roll();\nlet roll3 = await table3.roll();\nlet roll4 = await table4.roll();\nlet roll5 = await table5.roll();\nlet roll6 = await table6.roll();\nlet roll7 = await table7.roll();\n\nlet content = `\n<p><strong>Si es hombre</strong></p> ${roll7.results[0].data.text}<br> \n<p><strong>Si es mujer</strong></p> ${roll6.results[0].data.text}.<br> \n<p><strong>Características primarias</strong></p> ${roll1.results[0].data.text}<br>\n<p><strong>Características secundarias</strong></p> ${roll2.results[0].data.text}.<br>\n<p><strong>Trabaja como</strong></p> ${roll3.results[0].data.text}<br>\n<p><strong>Una cualidad destacada</strong></p> ${roll4.results[0].data.text}.<br>\n<p><strong>Un problema personal</strong></p> ${roll5.results[0].data.text}.<br>`\n\nChatMessage.create({content: content})","folder":null,"sort":0,"permission":{"default":0,"NLu8dzFBI3Kvrwky":3},"flags":{"advanced-macros":{"runAsGM":false},"exportSource":{"world":"aquelarre","system":"sandbox","coreVersion":"0.8.6","systemVersion":"0.9.4"}}}
{"_id":"Vd7KCgrlAKKGlUNQ","name":"Localización de daño","type":"script","author":"NLu8dzFBI3Kvrwky","img":"modules/game-icons-net/blackbackground/pierced-body.svg","scope":"global","command":"let table = game.tables.getName(\"Localización\")\n\nlet roll = await table.roll();\n\nlet content = `<p><strong>Te han dado en...</strong></p> ${roll.results[0].data.text}<br>`\n\nChatMessage.create({content: content})","folder":null,"sort":-100000,"permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"NLu8dzFBI3Kvrwky":3},"flags":{"exportSource":{"world":"aquelarre","system":"sandbox","coreVersion":"0.8.6","systemVersion":"0.9.4"}}}
{"_id":"fdeppX1UkGZZyygR","name":"Soundlink","permission":{"default":0,"NLu8dzFBI3Kvrwky":3},"type":"script","sort":100001,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"/**\n * Sound Link Builder v2.0\n * Thanks to @brunocalado\n * Macro for: https://github.com/superseva/sound-link\n * Icon: \n */\n\nmain()\n\nfunction main() {\n\tlet choices = new Object();\n\tfor (let playlist of game.playlists) {\n\t\tlet playlistName = playlist.name;\n\t\tchoices[playlistName] = new Array();\n\n\t\tfor (let sound of playlist.sounds) {\n\t\t\tlet soundName = sound.name;\n\t\t\tchoices[playlistName].push(soundName);\n\t\t}\n\t}\n\n\tnew Dialog({\n\t\ttitle: \"Sound Link Builder v2.0\",\n\t\tcontent: generateContent(choices),\n\t\tbuttons: {\n\t\t\tok: {\n\t\t\t\tlabel: \"Generate\",\n\t\t\t\ticon: '<i class=\"fas fa-cog\"></i>',\n\t\t\t\tcallback: async (html) => {\n\t\t\t\t\tgenerateCode(html);\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}).render(true);\n}\n\nfunction generateContent(choices) {\n\tlet playlists = new String();\n\tfor (let pl in choices) {\n\t\tlet sounds = JSON.stringify(choices[pl]);\n\t\tplaylists += `\\n<option data-sounds='${sounds}'>${pl}</option>`;\n\t}\n\n\tlet script = `\n\t\t<script>\n\t\t\tfunction switchSounds(select) {\n\t\t\t\tlet sounds = document.getElementById(\"soundname\");\n\t\t\t\n\t\t\t\t// remove old option in sounds select\n\t\t\t\twhile (sounds.firstChild) {\n\t\t\t\t\tsounds.removeChild(sounds.firstChild);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// get sounds list from dataset\n\t\t\t\tlet rawsounds = select.selectedOptions[0].dataset.sounds;\n\t\t\t\tif (rawsounds === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// add option in sounds select\n\t\t\t\tfor (let sound of JSON.parse(rawsounds)) {\n\t\t\t\t\tlet option = document.createElement(\"option\");\n\t\t\t\t\toption.innerHTML = sound;\n\t\t\t\t\tsounds.appendChild(option);\n\t\t\t\t}\n\t\t\t}\n\t\t</script>\n\t`;\n\n\tlet style = `\n\t\t<style>\n\t\t\t.label {\n\t\t\t\tdisplay: inline-block;\n\t\t\t\twidth: 100px;\n\t\t\t}\n\n\t\t\t.input {\n\t\t\t\tdisplay: inline-block;\n\t\t\t\twidth: 250px !important;\n\t\t\t\tbox-sizing: border-box;\n\t\t\t}\n\t\t</style>\n\t`;\n\n\tlet html = `\n\t\t<p>\n\t\t\t<label for=\"playlistname\" class=\"label\"> Playlist Name: </label>\n\t\t\t<select id=\"playlistname\" class=\"input\" onchange=\"switchSounds(this)\">\n\t\t\t\t<option>-----</option>\n\t\t\t\t${playlists}\n\t\t\t</select>\n\t\t</p>\n\t\t\n\t\t<p>\n\t\t\t<label for=\"soundname\" class=\"label\"> Sound Name: </label>\n\t\t\t<select id=\"soundname\" class=\"input\"></select>\n\t\t</p>\n\t\t\n\t\t<p>\n\t\t\t<label for=\"linkname\" class=\"label\"> Link Name: </label>\n\t\t\t<input id=\"linkname\" type=\"text\" class=\"input\">\n\t\t</p>\n\t`;\n\n\treturn `\n\t\t${script}\n\t\t${style}\n\t\t${html}\n\t`;\n}\n\n\nasync function generateCode(html) {\n\tlet playlistname = html.find(\"#playlistname\").val();\n\tlet soundname = html.find(\"#soundname\").val();\n\tlet linkname = html.find(\"#linkname\").val();\n\n\tlet template = `<a class=\"sound_link\" data-playlist=\"${playlistname}\" data-sound=\"${soundname}\">${linkname}</a>`;\n\n\t/* view */\n\tlet form = `\n\t\t<label>Copy this to the journal Source Code</label>\n\t\t<textarea id=\"moduleTextArea\" rows=\"5\" cols=\"33\">${template}</textarea>\n\t`;\n\n\tlet dialog = new Dialog({\n\t\ttitle: \"module.json\",\n\t\tcontent: form,\n\t\tbuttons: {\n\t\t\tuse: {\n\t\t\t\tlabel: \"Copy to Clipboard\",\n\t\t\t\tcallback: () => {\n\t\t\t\t\tlet copyText = document.getElementById(\"moduleTextArea\"); /* Get the text field */\n\t\t\t\t\tcopyText.select(); /* Select the text field */\n\t\t\t\t\tdocument.execCommand(\"copy\"); /* Copy the text inside the text field */\n\t\t\t\t\tui.notifications.notify(`Saved on Clipboard`); /* Alert the copied text */\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}).render(true);\n}","author":"NLu8dzFBI3Kvrwky","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"graeqsLDcvNPV9mq","name":"Pifias C&C","type":"script","author":"NLu8dzFBI3Kvrwky","img":"modules/game-icons-net/whitetransparent/drop-weapon.svg","scope":"global","command":"let table1 = game.tables.getName(\"Pifias C&C\");\n\nlet roll1 = await table1.roll();\n\nlet content = `<p><strong>Pifia con armas cuerpo a cuerpo</strong></p> ${roll1.results[0].data.text}<br>`\n\nChatMessage.create({content: content})","folder":null,"sort":-25000,"permission":{"default":0,"NLu8dzFBI3Kvrwky":3},"flags":{"advanced-macros":{"runAsGM":false},"exportSource":{"world":"aquelarre","system":"sandbox","coreVersion":"0.8.6","systemVersion":"0.9.4"}}}
{"_id":"nvIsy3w1hgDgtD3w","name":"Comprobación","type":"script","author":"NLu8dzFBI3Kvrwky","img":"icons/svg/dice-target.svg","scope":"global","command":"( \n    async () => {\n        for(let i=0;i<game.items.contents.length;i++){\n            let s_object = game.items.contents[i];\n            if(s_object.type==\"cItem\")\n                console.log(s_object.name + \" id:\" + s_object.id + \" ciKey:\" + s_object.data.data.ciKey);\n        }\n    }\n)();","folder":null,"sort":0,"permission":{"default":0,"NLu8dzFBI3Kvrwky":3},"flags":{}}
{"$$deleted":true,"_id":"2qbpjCpadycBST7P"}
{"$$deleted":true,"_id":"G5f0HstL2k59TITQ"}
{"$$deleted":true,"_id":"fdeppX1UkGZZyygR"}
{"$$deleted":true,"_id":"4ysVymDtET4pv89q"}
{"$$deleted":true,"_id":"OPW7rVUFita4Ahay"}
{"$$deleted":true,"_id":"AzKx2a2nv2DRNxfN"}
{"$$deleted":true,"_id":"nvIsy3w1hgDgtD3w"}
{"$$deleted":true,"_id":"AKjIqBTf2gK7ShB8"}
